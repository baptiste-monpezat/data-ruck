{"version":3,"file":"component---src-pages-blog-index-js-ab01be64452f5742105e.js","mappings":"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","sources":["webpack://data-ruck/./src/components/seo.js","webpack://data-ruck/./src/components/tag.js","webpack://data-ruck/./src/components/blogpost.js","webpack://data-ruck/./src/pages/blog/index.js"],"sourcesContent":["import * as React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\n\n\n\n\nconst Seo = ({ page, description, type, path }) => {\n\n    const data = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    title\n                    description\n                    author\n                    keywords\n                    url\n                    lang\n                }\n            }\n        file(\n          absolutePath: { glob: \"**/src/images/og-image.png\" }\n        ) {\n          childImageSharp {\n            gatsbyImageData(layout: FIXED)\n          }\n        }\n        }\n    `\n    )\n\n\n\n\n    return (\n        <>\n\n            <title>{`${page} | ${data.site.siteMetadata.title}`}</title>\n            <html lang={data.site.siteMetadata.lang} />\n            <meta name=\"description\" content={description} />\n            <meta name=\"image\" content={data.file.childImageSharp.gatsbyImageData.images.fallback.src} />\n            <meta name=\"image:alt\" content={description} />\n            <meta name=\"keywords\" content={data.site.siteMetadata.keywords} />\n\n\n            {/* Facebook */}\n            <meta property=\"og:type\" content={type} />\n            <meta property=\"og:title\" content={page} />\n            <meta property=\"og:url\" content={`${data.site.siteMetadata.url}${path}`} />\n            <meta property=\"og:description\" content={description} />\n            <meta property=\"og:image\" content={data.file.childImageSharp.gatsbyImageData.images.fallback.src} />\n            <meta property=\"og:image:alt\" content={description}></meta>\n\n            {/* Twitter */}\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            <meta name=\"twitter:title\" content={page} />\n            <meta name=\"twitter:url\" content={`${data.site.siteMetadata.url}${path}`} />\n            <meta name=\"twitter:description\" content={description} />\n            <meta name=\"twitter:image\" content={data.file.childImageSharp.gatsbyImageData.images.fallback.src} />\n            <meta name=\"twitter:image:alt\" content={description}></meta>\n        </>\n    )\n}\n\nexport default Seo","import * as React from \"react\"\n\n\nconst Tag = ({ category }) => {\n\n    return (\n        <div className=\"flex w-fit rounded-xl bg-red-900 dark:bg-white px-2\">\n            <p className=\"font-semibold text-base text-white dark:text-slate-800 \">{category}</p>\n        </div>\n    )\n\n}\n\nexport default Tag","import * as React from \"react\"\n\nimport Tag from \"../components/tag\"\n\n\n\nconst BlogPost = ({ id, title, date, excerpt, categories }) => {\n\n    return (\n        <div className=\"flex flex-col gap-2\">\n            <p className=\"text-ellipsis font-bold text-2xl text-red-900 dark:text-red-500\">{title}</p>\n            <p className=\"text-base text-red-900 dark:text-slate-400\">{date}</p>\n            <p className=\"text-ellipsis line-clamp-2 text-lg text-black max-w-prose dark:text-white\">{excerpt}</p>\n\n            <div className=\"flex flex-row gap-3\">\n                {\n                    categories.split('|').map((category) => {\n                        return <Tag key={category} category={category} />\n                    })\n\n                }\n            </div>\n\n        </div>\n    )\n}\n\nexport default BlogPost","import * as React from \"react\"\nimport { graphql } from 'gatsby'\nimport { Link } from 'gatsby'\n\nimport Layout from \"../../components/layout\"\nimport Seo from \"../../components/seo\"\nimport BlogPost from \"../../components/blogpost\"\n\n\nconst IndexPage = ({ data }) => {\n  return (\n    <Layout>\n      <div className=\"flex flex-grow mx-auto flex w-full max-w-[820px] flex-col p-6 sm:p-16 gap-10\">\n        <p className=\"font-bold text-5xl relative left-0 text-red-900 dark:text-white z-0\">Articles</p>\n        {data.allMdx.nodes.map((node) => {\n          return <Link key={node.id} to={`/blog/${node.frontmatter.slug}`}><BlogPost id={node.id} title={node.frontmatter.title} date={node.frontmatter.datePublished} excerpt={node.excerpt} categories={node.frontmatter.categories} /></Link>\n        })}\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMdx (sort : {frontmatter: {datePublished:DESC}}){\n    nodes {\n      id\n      excerpt\n      frontmatter {\n        title\n        slug\n        datePublished(formatString: \"MMMM D, YYYY\")\n        categories\n      }\n    }\n  }}`\n\nexport const Head = () => <Seo page=\"Data Ruck Articles\" description=\"Data Ruck articles\" type=\"website\" path=\"/blog/\" />\n\nexport default IndexPage\n\n\n"],"names":["_ref","page","description","type","path","data","useStaticQuery","React","site","siteMetadata","title","lang","name","content","file","childImageSharp","gatsbyImageData","images","fallback","src","keywords","property","url","category","className","id","date","excerpt","categories","split","map","Tag","key","Head","Seo","Layout","allMdx","nodes","node","Link","to","frontmatter","slug","BlogPost","datePublished"],"sourceRoot":""}
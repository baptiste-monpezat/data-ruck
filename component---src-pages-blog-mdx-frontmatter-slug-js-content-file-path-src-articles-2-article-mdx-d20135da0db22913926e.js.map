{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-src-articles-2-article-mdx-d20135da0db22913926e.js","mappings":"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","sources":["webpack://data-ruck/./src/articles/2-article.mdx","webpack://data-ruck/./src/pages/blog/{mdx.frontmatter__slug}.js","webpack://data-ruck/./src/components/seo.js","webpack://data-ruck/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Title 1\"), \"\\n\", React.createElement(_components.p, null, \"Analysis:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"akbdcbdhcbhc\"), \"\\n\", React.createElement(_components.li, null, \"akbdcbdhcbhc\"), \"\\n\", React.createElement(_components.li, null, \"akbdcbdhcbhc\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Bisous\"), \"\\n\", React.createElement(_components.h1, null, \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"Lorem Ipsum\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/baptiste/Documents/baptiste/ruck-de-data/blog/src/articles/2-article.mdx\";\nimport * as React from 'react';\nimport {graphql} from 'gatsby';\nimport Layout from '../../components/layout';\nimport Seo from '../../components/seo';\nconst BlogPost = ({data, children}) => {\n  return React.createElement(Layout, null, React.createElement(\"div\", {\n    className: \"flex flex-grow flex-col prose prose-light my-20 mx-auto w-full max-w-[1000px] dark:prose-invert\"\n  }, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(\"h3\", null, data.mdx.frontmatter.datePublished), children));\n};\nexport const Head = ({data}) => React.createElement(Seo, {\n  page: \"Article\",\n  description: \"Page with all written articles\",\n  type: \"website\",\n  path: `/blog/${data.mdx.frontmatter.slug}`\n});\nexport const query = graphql`\n  query ($id:String){\n  mdx(id: {eq:$id}) {\n    frontmatter {\n      title\n      slug\n      datePublished(formatString: \"MMMM D, YYYY\")\n    }\n  }\n}`;\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import * as React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\n\n\n\n\nconst Seo = ({ page, description, type, path }) => {\n\n    const data = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    title\n                    description\n                    author\n                    keywords\n                    url\n                    lang\n                }\n            }\n        file(\n          absolutePath: { glob: \"**/src/images/og-image.png\" }\n        ) {\n          childImageSharp {\n            gatsbyImageData(layout: FIXED)\n          }\n        }\n        }\n    `\n    )\n\n\n\n\n    return (\n        <>\n            <script>\n                const theme = localStorage.getItem('theme') || 'dark';\n                localStorage.theme = theme;\n            </script>\n            <title>{`${page} | ${data.site.siteMetadata.title}`}</title>\n            <html lang={data.site.siteMetadata.lang} />\n            <meta name=\"description\" content={description} />\n            <meta name=\"image\" content={data.file.childImageSharp.gatsbyImageData.images.fallback.src} />\n            <meta name=\"image:alt\" content={description} />\n            <meta name=\"keywords\" content={data.site.siteMetadata.keywords} />\n\n\n            {/* Facebook */}\n            <meta property=\"og:type\" content={type} />\n            <meta property=\"og:title\" content={page} />\n            <meta property=\"og:url\" content={`${data.site.siteMetadata.url}${path}`} />\n            <meta property=\"og:description\" content={description} />\n            <meta property=\"og:image\" content={data.file.childImageSharp.gatsbyImageData.images.fallback.src} />\n            <meta property=\"og:image:alt\" content={description}></meta>\n\n            {/* Twitter */}\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            <meta name=\"twitter:title\" content={page} />\n            <meta name=\"twitter:url\" content={`${data.site.siteMetadata.url}${path}`} />\n            <meta name=\"twitter:description\" content={description} />\n            <meta name=\"twitter:image\" content={data.file.childImageSharp.gatsbyImageData.images.fallback.src} />\n            <meta name=\"twitter:image:alt\" content={description}></meta>\n        </>\n    )\n}\n\nexport default Seo","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","ul","li","_provideComponents","components","React","wrapper","MDXLayout","BlogPost","_ref","data","children","Layout","className","mdx","frontmatter","title","datePublished","Head","_ref2","Seo","page","description","type","path","slug","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","useStaticQuery","site","siteMetadata","lang","name","content","file","childImageSharp","gatsbyImageData","images","fallback","src","keywords","property","url","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
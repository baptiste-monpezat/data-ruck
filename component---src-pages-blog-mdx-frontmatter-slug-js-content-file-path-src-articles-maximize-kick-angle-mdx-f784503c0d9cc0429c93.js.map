{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-src-articles-maximize-kick-angle-mdx-f784503c0d9cc0429c93.js","mappings":"8NAMA,MAAMA,EAAWC,IAAsB,IAArB,KAACC,EAAI,SAAEC,GAAS,EAChC,OAAOC,EAAAA,cAAoBC,EAAAA,EAAQ,KAAMD,EAAAA,cAAoB,MAAO,CAClEE,UAAW,2JACVF,EAAAA,cAAoB,KAAM,CAC3BE,UAAW,gCACVJ,EAAKK,IAAIC,YAAYC,OAAQL,EAAAA,cAAoB,KAAM,CACxDE,UAAW,gCACVJ,EAAKK,IAAIC,YAAYE,eAAgBP,GAAU,EAEvCQ,EAAOC,IAAA,IAAC,KAACV,GAAK,SAAKE,EAAAA,cAAoBS,EAAAA,EAAK,CACvDC,KAAMZ,EAAKK,IAAIC,YAAYC,MAC3BM,YAAa,iCACbC,KAAM,UACNC,KAAM,SAASf,EAAKK,IAAIC,YAAYU,QACpC,EAYa,SAASC,EAAiBC,GACvC,OAAOhB,EAAAA,cAAoBJ,EAAUoB,EAAOhB,EAAAA,cAAoBiB,EAAAA,EAAqBD,GACvF,C,+CC8BA,IA1DYnB,IAAwC,IAAvC,KAAEa,EAAI,YAAEC,EAAW,KAAEC,EAAI,KAAEC,GAAMhB,EAE1C,MAAMC,GAAOoB,EAAAA,EAAAA,gBAAe,cA0B5B,OACIlB,EAAAA,cAAAA,EAAAA,SAAA,KAEIA,EAAAA,cAAA,aAAQ,GAAGU,OAAUZ,EAAKqB,KAAKC,aAAaf,SAC5CL,EAAAA,cAAA,QAAMqB,KAAMvB,EAAKqB,KAAKC,aAAaC,OACnCrB,EAAAA,cAAA,QAAMsB,KAAK,cAAcC,QAASZ,IAClCX,EAAAA,cAAA,QAAMsB,KAAK,QAAQC,QAASzB,EAAK0B,KAAKC,gBAAgBC,gBAAgBC,OAAOC,SAASC,MACtF7B,EAAAA,cAAA,QAAMsB,KAAK,YAAYC,QAASZ,IAChCX,EAAAA,cAAA,QAAMsB,KAAK,WAAWC,QAASzB,EAAKqB,KAAKC,aAAaU,WAItD9B,EAAAA,cAAA,QAAM+B,SAAS,UAAUR,QAASX,IAClCZ,EAAAA,cAAA,QAAM+B,SAAS,WAAWR,QAASb,IACnCV,EAAAA,cAAA,QAAM+B,SAAS,SAASR,QAAS,GAAGzB,EAAKqB,KAAKC,aAAaY,MAAMnB,MACjEb,EAAAA,cAAA,QAAM+B,SAAS,iBAAiBR,QAASZ,IACzCX,EAAAA,cAAA,QAAM+B,SAAS,WAAWR,QAASzB,EAAK0B,KAAKC,gBAAgBC,gBAAgBC,OAAOC,SAASC,MAC7F7B,EAAAA,cAAA,QAAM+B,SAAS,eAAeR,QAASZ,IAGvCX,EAAAA,cAAA,QAAMsB,KAAK,eAAeC,QAAQ,wBAClCvB,EAAAA,cAAA,QAAMsB,KAAK,gBAAgBC,QAASb,IACpCV,EAAAA,cAAA,QAAMsB,KAAK,cAAcC,QAAS,GAAGzB,EAAKqB,KAAKC,aAAaY,MAAMnB,MAClEb,EAAAA,cAAA,QAAMsB,KAAK,sBAAsBC,QAASZ,IAC1CX,EAAAA,cAAA,QAAMsB,KAAK,gBAAgBC,QAASzB,EAAK0B,KAAKC,gBAAgBC,gBAAgBC,OAAOC,SAASC,MAC9F7B,EAAAA,cAAA,QAAMsB,KAAK,oBAAoBC,QAASZ,IACzC,C,sEC3BJ,MAAMsB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBC,GAC/B,MAAMC,EAAoB,aAAiBH,GAG3C,OAAO,WAAc,IAEO,mBAAfE,EACFA,EAAWC,GAGb,IAAIA,KAAsBD,IAChC,CAACC,EAAmBD,GACzB,C","sources":["webpack://data-ruck/./src/pages/blog/{mdx.frontmatter__slug}.js","webpack://data-ruck/./src/components/seo.js","webpack://data-ruck/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["import GATSBY_COMPILED_MDX from \"/Users/baptiste/Documents/baptiste/ruck-de-data/blog/src/articles/maximize_kick_angle.mdx\";\nimport * as React from 'react';\nimport \"katex/dist/katex.min.css\";\nimport {graphql} from 'gatsby';\nimport Layout from '../../components/layout';\nimport Seo from '../../components/seo';\nconst BlogPost = ({data, children}) => {\n  return React.createElement(Layout, null, React.createElement(\"div\", {\n    className: \"flex flex-grow flex-col text-ellipsis line-clamp-2 text-lg max-w-prose prose prose-light dark:prose-dark my-20 mx-auto w-full max-w-[1000px] p-6 sm:p-6\"\n  }, React.createElement(\"h1\", {\n    className: \"text-red-900 dark:text-white\"\n  }, data.mdx.frontmatter.title), React.createElement(\"h3\", {\n    className: \"text-red-900 dark:text-white\"\n  }, data.mdx.frontmatter.datePublished), children));\n};\nexport const Head = ({data}) => React.createElement(Seo, {\n  page: data.mdx.frontmatter.title,\n  description: \"Page with all written articles\",\n  type: \"website\",\n  path: `/blog/${data.mdx.frontmatter.slug}`\n});\nexport const query = graphql`\n  query ($id:String){\n  mdx(id: {eq:$id}) {\n    frontmatter {\n      title\n      slug\n      datePublished(formatString: \"MMMM D, YYYY\")\n    }\n  }\n}`;\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import * as React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\n\n\n\n\nconst Seo = ({ page, description, type, path }) => {\n\n    const data = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    title\n                    description\n                    author\n                    keywords\n                    url\n                    lang\n                }\n            }\n        file(\n          absolutePath: { glob: \"**/src/images/og-image.png\" }\n        ) {\n          childImageSharp {\n            gatsbyImageData(layout: FIXED)\n          }\n        }\n        }\n    `\n    )\n\n\n\n\n    return (\n        <>\n\n            <title>{`${page} | ${data.site.siteMetadata.title}`}</title>\n            <html lang={data.site.siteMetadata.lang} />\n            <meta name=\"description\" content={description} />\n            <meta name=\"image\" content={data.file.childImageSharp.gatsbyImageData.images.fallback.src} />\n            <meta name=\"image:alt\" content={description} />\n            <meta name=\"keywords\" content={data.site.siteMetadata.keywords} />\n\n\n            {/* Facebook */}\n            <meta property=\"og:type\" content={type} />\n            <meta property=\"og:title\" content={page} />\n            <meta property=\"og:url\" content={`${data.site.siteMetadata.url}${path}`} />\n            <meta property=\"og:description\" content={description} />\n            <meta property=\"og:image\" content={data.file.childImageSharp.gatsbyImageData.images.fallback.src} />\n            <meta property=\"og:image:alt\" content={description}></meta>\n\n            {/* Twitter */}\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            <meta name=\"twitter:title\" content={page} />\n            <meta name=\"twitter:url\" content={`${data.site.siteMetadata.url}${path}`} />\n            <meta name=\"twitter:description\" content={description} />\n            <meta name=\"twitter:image\" content={data.file.childImageSharp.gatsbyImageData.images.fallback.src} />\n            <meta name=\"twitter:image:alt\" content={description}></meta>\n        </>\n    )\n}\n\nexport default Seo","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["BlogPost","_ref","data","children","React","Layout","className","mdx","frontmatter","title","datePublished","Head","_ref2","Seo","page","description","type","path","slug","GatsbyMDXWrapper","props","GATSBY_COMPILED_MDX","useStaticQuery","site","siteMetadata","lang","name","content","file","childImageSharp","gatsbyImageData","images","fallback","src","keywords","property","url","MDXContext","useMDXComponents","components","contextComponents"],"sourceRoot":""}
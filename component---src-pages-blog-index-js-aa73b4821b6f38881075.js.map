{"version":3,"file":"component---src-pages-blog-index-js-aa73b4821b6f38881075.js","mappings":"mIAmEA,IA7DY,IAAwC,IAAvC,KAAEA,EAAI,YAAEC,EAAW,KAAEC,EAAI,KAAEC,GAAM,EAE1C,MAAMC,GAAOC,EAAAA,EAAAA,gBAAe,cA0B5B,OACI,gCACI,8BAAQ,wGAIR,6BAAS,GAAEL,OAAUI,EAAKE,KAAKC,aAAaC,SAC5C,wBAAMC,KAAML,EAAKE,KAAKC,aAAaE,OACnC,wBAAMC,KAAK,cAAcC,QAASV,IAClC,wBAAMS,KAAK,QAAQC,QAASP,EAAKQ,KAAKC,gBAAgBC,gBAAgBC,OAAOC,SAASC,MACtF,wBAAMP,KAAK,YAAYC,QAASV,IAChC,wBAAMS,KAAK,WAAWC,QAASP,EAAKE,KAAKC,aAAaW,WAItD,wBAAMC,SAAS,UAAUR,QAAST,IAClC,wBAAMiB,SAAS,WAAWR,QAASX,IACnC,wBAAMmB,SAAS,SAASR,QAAU,GAAEP,EAAKE,KAAKC,aAAaa,MAAMjB,MACjE,wBAAMgB,SAAS,iBAAiBR,QAASV,IACzC,wBAAMkB,SAAS,WAAWR,QAASP,EAAKQ,KAAKC,gBAAgBC,gBAAgBC,OAAOC,SAASC,MAC7F,wBAAME,SAAS,eAAeR,QAASV,IAGvC,wBAAMS,KAAK,eAAeC,QAAQ,wBAClC,wBAAMD,KAAK,gBAAgBC,QAASX,IACpC,wBAAMU,KAAK,cAAcC,QAAU,GAAEP,EAAKE,KAAKC,aAAaa,MAAMjB,MAClE,wBAAMO,KAAK,sBAAsBC,QAASV,IAC1C,wBAAMS,KAAK,gBAAgBC,QAASP,EAAKQ,KAAKC,gBAAgBC,gBAAgBC,OAAOC,SAASC,MAC9F,wBAAMP,KAAK,oBAAoBC,QAASV,IACzC,C,0IClDX,MAVY,IAAmB,IAAlB,SAAEoB,GAAU,EAErB,OACI,uBAAKC,UAAU,uDACX,qBAAGA,UAAU,2DAA2DD,GACtE,ECmBd,MArBiB,IAA+C,IAA9C,GAAEE,EAAE,MAAEf,EAAK,KAAEgB,EAAI,QAAEC,EAAO,WAAEC,GAAY,EAEtD,OACI,uBAAKJ,UAAU,uBACX,qBAAGA,UAAU,mEAAmEd,GAChF,qBAAGc,UAAU,8CAA8CE,GAC3D,qBAAGF,UAAU,6EAA6EG,GAE1F,uBAAKH,UAAU,uBAEPI,EAAWC,MAAM,KAAKC,KAAKP,GAChB,gBAAC,EAAG,CAACQ,IAAKR,EAAUA,SAAUA,OAM/C,ECdd,MA4BaS,EAAO,IAAM,gBAAC,IAAG,CAAC9B,KAAK,WAAWC,YAAY,iCAAiCC,KAAK,UAAUC,KAAK,WAEhH,MA9BkB,IAAe,IAAd,KAAEC,GAAM,EACzB,OACE,gBAAC,IAAM,KACL,uBAAKkB,UAAU,gFACb,qBAAGA,UAAU,uEAAsE,YAClFlB,EAAK2B,OAAOC,MAAMJ,KAAKK,GACf,gBAAC,EAAAC,KAAI,CAACL,IAAKI,EAAKV,GAAIY,GAAK,SAAQF,EAAKG,YAAYC,QAAQ,gBAAC,EAAQ,CAACd,GAAIU,EAAKV,GAAIf,MAAOyB,EAAKG,YAAY5B,MAAOgB,KAAMS,EAAKG,YAAYE,cAAeb,QAASQ,EAAKR,QAASC,WAAYO,EAAKG,YAAYV,iBAG9M,C","sources":["webpack://data-ruck/./src/components/seo.js","webpack://data-ruck/./src/components/tag.js","webpack://data-ruck/./src/components/blogpost.js","webpack://data-ruck/./src/pages/blog/index.js"],"sourcesContent":["import * as React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\n\n\n\n\nconst Seo = ({ page, description, type, path }) => {\n\n    const data = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    title\n                    description\n                    author\n                    keywords\n                    url\n                    lang\n                }\n            }\n        file(\n          absolutePath: { glob: \"**/src/images/og-image.png\" }\n        ) {\n          childImageSharp {\n            gatsbyImageData(layout: FIXED)\n          }\n        }\n        }\n    `\n    )\n\n\n\n\n    return (\n        <>\n            <script>\n                const theme = localStorage.getItem('theme') || 'dark';\n                document.documentElement.classList.add(theme)\n            </script>\n            <title>{`${page} | ${data.site.siteMetadata.title}`}</title>\n            <html lang={data.site.siteMetadata.lang} />\n            <meta name=\"description\" content={description} />\n            <meta name=\"image\" content={data.file.childImageSharp.gatsbyImageData.images.fallback.src} />\n            <meta name=\"image:alt\" content={description} />\n            <meta name=\"keywords\" content={data.site.siteMetadata.keywords} />\n\n\n            {/* Facebook */}\n            <meta property=\"og:type\" content={type} />\n            <meta property=\"og:title\" content={page} />\n            <meta property=\"og:url\" content={`${data.site.siteMetadata.url}${path}`} />\n            <meta property=\"og:description\" content={description} />\n            <meta property=\"og:image\" content={data.file.childImageSharp.gatsbyImageData.images.fallback.src} />\n            <meta property=\"og:image:alt\" content={description}></meta>\n\n            {/* Twitter */}\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            <meta name=\"twitter:title\" content={page} />\n            <meta name=\"twitter:url\" content={`${data.site.siteMetadata.url}${path}`} />\n            <meta name=\"twitter:description\" content={description} />\n            <meta name=\"twitter:image\" content={data.file.childImageSharp.gatsbyImageData.images.fallback.src} />\n            <meta name=\"twitter:image:alt\" content={description}></meta>\n        </>\n    )\n}\n\nexport default Seo","import * as React from \"react\"\n\n\nconst Tag = ({ category }) => {\n\n    return (\n        <div className=\"flex w-fit rounded-xl bg-red-900 dark:bg-white px-2\">\n            <p className=\"font-semibold text-base text-white dark:text-slate-800 \">{category}</p>\n        </div>\n    )\n\n}\n\nexport default Tag","import * as React from \"react\"\n\nimport Tag from \"../components/tag\"\n\n\n\nconst BlogPost = ({ id, title, date, excerpt, categories }) => {\n\n    return (\n        <div className=\"flex flex-col gap-2\">\n            <p className=\"text-ellipsis font-bold text-2xl text-red-900 dark:text-red-500\">{title}</p>\n            <p className=\"text-base text-red-900 dark:text-slate-400\">{date}</p>\n            <p className=\"text-ellipsis line-clamp-2 text-lg text-black max-w-prose dark:text-white\">{excerpt}</p>\n\n            <div className=\"flex flex-row gap-3\">\n                {\n                    categories.split('|').map((category) => {\n                        return <Tag key={category} category={category} />\n                    })\n\n                }\n            </div>\n\n        </div>\n    )\n}\n\nexport default BlogPost","import * as React from \"react\"\nimport { graphql } from 'gatsby'\nimport { Link } from 'gatsby'\n\nimport Layout from \"../../components/layout\"\nimport Seo from \"../../components/seo\"\nimport BlogPost from \"../../components/blogpost\"\n\n\nconst IndexPage = ({ data }) => {\n  return (\n    <Layout>\n      <div className=\"flex flex-grow mx-auto flex w-full max-w-[820px] flex-col p-6 sm:p-16 gap-10\">\n        <p className=\"font-bold text-5xl relative left-0 text-red-900 dark:text-white z-0\">Articles</p>\n        {data.allMdx.nodes.map((node) => {\n          return <Link key={node.id} to={`/blog/${node.frontmatter.slug}`}><BlogPost id={node.id} title={node.frontmatter.title} date={node.frontmatter.datePublished} excerpt={node.excerpt} categories={node.frontmatter.categories} /></Link>\n        })}\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMdx (sort : {frontmatter: {datePublished:DESC}}){\n    nodes {\n      id\n      excerpt\n      frontmatter {\n        title\n        slug\n        datePublished(formatString: \"MMMM D, YYYY\")\n        categories\n      }\n    }\n  }}`\n\nexport const Head = () => <Seo page=\"Articles\" description=\"Page with all written articles\" type=\"website\" path=\"/blog/\" />\n\nexport default IndexPage\n\n\n"],"names":["page","description","type","path","data","useStaticQuery","site","siteMetadata","title","lang","name","content","file","childImageSharp","gatsbyImageData","images","fallback","src","keywords","property","url","category","className","id","date","excerpt","categories","split","map","key","Head","allMdx","nodes","node","Link","to","frontmatter","slug","datePublished"],"sourceRoot":""}